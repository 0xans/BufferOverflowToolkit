import argparse
from colorama import Fore, init, Style
init()
info = f'{Fore.YELLOW + Style.BRIGHT}[!]{Fore.RESET + Style.RESET_ALL}'
success = f'{Fore.GREEN + Style.BRIGHT}[+]{Fore.RESET + Style.RESET_ALL}'
error = f'{Fore.RED + Style.BRIGHT}[-]{Fore.RESET + Style.RESET_ALL}'

def badchars(excluded_chars):
    all_bytes = bytearray(range(256))
    for bad_char in excluded_chars:
        all_bytes.remove(bad_char)
    return all_bytes

def output(bad_chars):
    for i in range(0, len(bad_chars), 16):
        line = '"' + ''.join([f"\\x{b:02x}" for b in bad_chars[i:i+16]]) + '"'
        print(line)

def main():
    parser = argparse.ArgumentParser(description='Generate all byte values from \\x00 to \\xff as a formatted string for buffer overflow')
    parser.add_argument('-b', '--badchars', type=str, help='Bad characters to exclude (e.g., "\\x00\\x0a")', default='')
    parser.add_argument('-o', '--output', type=str, help='Output file to save the byte array', default='')
    args = parser.parse_args()

    excluded_chars = [int(args.badchars[i:i+4].replace('\\x', ''), 16) for i in range(0, len(args.badchars), 4)]
    bad_chars = badchars(excluded_chars)
    print(f"{success} Generated bytes:")
    output(bad_chars)

    if args.output:
        with open(args.output, 'w') as f:
            f.write(''.join([f"\\x{b:02x}" for b in bad_chars]))
        print(f"{success} Byte array saved to {args.output}")

if __name__ == '__main__':
    main()
